import subprocess
import os
import argparse
import shutil  # Import shutil for file operations
import glob

# Configure argparse to receive the 'tag' parameter
parser = argparse.ArgumentParser(description="Process log files and generate plots.")
parser.add_argument('--tag', required=True, help='Suffix to append to generated image files, e.g., "_1ms".')
args = parser.parse_args()

# Define key directories
logs_dir = "logs"
scripts_dir = "process_scripts"
docker_scripts = "docker_scripts"
output_dir = "output"
tag = args.tag  # Get the tag from command-line arguments

# Create output and log directories if they do not exist
os.makedirs(output_dir, exist_ok=True)
os.makedirs(logs_dir, exist_ok=True)

# Subdirectories inside output
output_csv = os.path.join(output_dir, "csv")

os.makedirs(output_csv, exist_ok=True)

# Define input log files and corresponding output CSV files
logs = ["L1.log", "L3.log", "L5.log"]
csvs = [os.path.join(output_csv, log.replace(".log", ".csv")) for log in logs]
print("CSV files to be generated:")
processed_csvs = [csv.replace(".csv", ".processed.csv") for csv in csvs]

# Step 0: Move .log files to the logs directory if not already there
print("Moving .log files to the 'logs' folder...")
for log in logs:
    source_path = os.path.join(docker_scripts, log)
    destination_path = os.path.join(logs_dir, log)
    
    if os.path.exists(source_path) and not os.path.exists(destination_path):
        print(f"Moving {source_path} -> {destination_path}...")
        shutil.move(source_path, destination_path)
    elif not os.path.exists(source_path):
        print(f"File {source_path} does not exist.")
    else:
        print(f"{log} is already in {logs_dir}, no need to move.")

# Step 1: Run processHandshake.py for each log file
print("Starting log processing...")

for log, csv_output in zip(logs, csvs):
    log_path = os.path.join(logs_dir, log)
    print(f"Processing {log_path} -> {csv_output}...")

    # Elimina posibles CSV previos en el directorio actual
    for f in glob.glob("*.csv"):
        os.remove(f)

    # Ejecuta el script que genera el CSV en el directorio actual
    subprocess.run([
        "python3",
        os.path.join(scripts_dir, "processHandshake.py"),
        log_path,
        os.path.basename(csv_output).split('.')[0]  # ejemplo: "mac"
    ], check=True)

    # Busca el archivo .csv generado
    generated_csvs = glob.glob("*.csv")
    if not generated_csvs:
        raise FileNotFoundError("❌ No CSV file generated by processHandshake.py")

    # Asumimos que solo se genera un CSV (como es tu caso)
    generated_csv = generated_csvs[0]

    # Asegura que el directorio destino existe
    os.makedirs(os.path.dirname(csv_output), exist_ok=True)

    # Mueve el archivo generado a la ubicación de destino
    shutil.move(generated_csv, csv_output)
    print(f"✅ Moved {generated_csv} to {csv_output}")

print("\n✅ All processing completed successfully!")
